"""
Function to parse micromeritics xls output files

@author Chris Murdock
"""

import xlrd
from itertools import product
import re


_fields = {
    'bet surface area': {
        'name': 'surface area',
        'row': 0,
        'column': 1,
        'type': 'number'
    },
    'sample:': {
        'name': 'sample',
        'row': 0,
        'column': 1,
        'type': 'string'
    },
    'sample mass': {
        'name': 'mass',
        'row': 0,
        'column': 1,
        'type': 'number'
    },
    'comments': {
        'name': 'comments',
        'row': 0,
        'column': 0,
        'type': 'string'
    },
    'analysis ads': {
        'name': 'gas',
        'row': 0,
        'column': 1,
        'type': 'string'
    },
    'analysis bath': {
        'name': 'temperature',
        'row': 0,
        'column': 1,
        'type': 'number'
    },
    'started': {
        'name': 'date',
        'row': 0,
        'column': 1,
        'type': 'string'
    },
    'isotherm tabular': {
        'type': 'list',
        'labels': {
            'Relative': 'relative',
            'Absolute': 'absolute',
            'Quantity': 'uptake',
            'Elapsed': 'time',
            'Saturation': 'saturation'
        }
    }
}


def read_xls_report(path):
    """
    Parses an xls file generated by micromeritics software.

    Arguments:
    path: the location of an xls file generated by a micromeritics instrument.

    Returns: A dictionary containing report information.
    """

    workbook = xlrd.open_workbook(path, encoding_override='latin-1')
    sheet = workbook.sheet_by_index(0)

    values = {}

    for r, c in product(range(sheet.nrows), range(sheet.ncols)):
        value = str(sheet.cell(r, c).value).lower()
        field = next((v for k, v in _fields.items()
                      if value.startswith(k)), None)
        if not field:
            continue
        if field['type'] == 'number':
            val = sheet.cell(r + field['row'], c + field['column']).value
            values[field['name']] = _handle_numbers(val)
        elif field['type'] == 'string':
            val = sheet.cell(r + field['row'], c + field['column']).value
            val = val.replace('Comments: ', '').replace('\r\n', ' ')
            values[field['name']] = val
        elif field['type'] == 'list':
            values['pressure'] = {}
            labels = _get_data_labels(sheet, r, c)
            for item in labels:
                if sheet.cell(r + 6, c).value:
                    points = _get_data_points(sheet, r, c)
                    c += 1
                    label = _fields['isotherm tabular']['labels']
                    name = next((f for f in label.keys()
                                if item.startswith(f)), None)
                    if label[name] == 'time':
                        values[label[name]] = _convert_time(points)
                    elif label[name] == 'uptake':
                        values[label[name]] = points
                    else:
                        values['pressure'][label[name]] = points
    return values


def _handle_numbers(val):
    """
    Takes a cell with a desired number as an input and removes any
    extra information (such as units) to return only the number as a float.
    """
    if val:
        val = val.replace(',', '')
        number_regex = re.compile(r'^(-)?\d+(.|,)?\d+')
        new_val = number_regex.search(val)
        val = float(new_val.group())
    else:
        val = None
    return val


def _convert_time(points):
    # Converts time points from HH:MM format to minutes.
    minutes = []
    for point in points:
        h, m = str(point).split(':')
        new_time = (int(h) * 60) + int(m)
        minutes.append(new_time)
    return minutes


def _get_data_labels(sheet, r, c):
    # Locates all column labels for data collected during the experiment.
    final_column = c
    value = sheet.cell(r + 2, final_column).value
    while any(value.startswith(field) for field
              in _fields['isotherm tabular']['labels'].keys()):
        final_column += 1
        value = sheet.cell(r + 2, final_column).value
    list_of_labels = [sheet.cell(r + 2, i).value for i
                      in range(c, final_column)]
    return list_of_labels


def _get_data_points(sheet, r, c):
    # Returns all collected data points for a given column.
    points = []
    new_row = r + 4
    point = sheet.cell(new_row, c).value
    while point:
        points.append(point)
        new_row += 1
        point = sheet.cell(new_row, c).value
    return points
