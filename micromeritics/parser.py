"""
Function to parse micromeritics xls output files

@author Chris Murdock
"""

import xlrd
from itertools import product
import re


_fields = {
    'bet surface area': {
        'name': 'surface area',
        'row': 0,
        'column': 1,
        'type': 'number'
    },
    'sample:': {
        'name': 'sample',
        'row': 0,
        'column': 1,
        'type': 'comment'
    },
    'sample mass': {
        'name': 'mass',
        'row': 0,
        'column': 1,
        'type': 'number'
    },
    'comments': {
        'name': 'comments',
        'row': 0,
        'column': 0,
        'type': 'comment'
    },
    'analysis ads': {
        'name': 'gas',
        'row': 0,
        'column': 1,
        'type': 'comment'
    },
    'analysis bath': {
        'name': 'temperature',
        'row': 0,
        'column': 1,
        'type': 'number'
    },
    'started': {
        'name': 'date',
        'row': 0,
        'column': 1,
        'type': 'comment'
    },
    'isotherm tabular': {
        'type': 'list',
        'labels': {
            'Relative': 'relative',
            'Absolute': 'absolute',
            'Quantity': 'uptake',
            'Elapsed': 'time',
            'Saturation': 'saturation'
        }
    }
}


def _handle_numbers(val):
    if val:
        val = val.replace(',', '')
        number_regex = re.compile(r'^(-)?\d+(.|,)?\d+')
        new_val = number_regex.search(val)
        val = float(new_val.group())
    return val


def _convert_time(points):
    minutes = []
    for point in points:
        h, m = str(point).split(':')
        new_time = (int(h) * 60) + int(m)
        minutes.append(new_time)
    return minutes


def read_xls_report(path):
    """
    Parses an xls file generated by micromeritics software.

    Arguments:
    path: the location of an xls file generated by a micromeritics instrument.

    Returns: A dictionary containing report information.
    """

    workbook = xlrd.open_workbook(path, encoding_override='latin-1')
    sheet = workbook.sheet_by_index(0)

    values = {}
    values['pressure'] = {}

    for r, c in product(range(sheet.nrows), range(sheet.ncols)):
        value = str(sheet.cell(r, c).value).lower()
        field = next((f for f in _fields if value.startswith(f)), None)
        if field:
            fields = _fields[field]
            if fields['type'] == 'number':
                val = sheet.cell(r + fields['row'], c + fields['column']).value
                _handle_numbers(val)
                values[fields['name']] = val
            elif fields['type'] == 'comment':
                val = sheet.cell(r + fields['row'], c + fields['column']).value
                val = val.replace('Comments: ', '').replace('\r\n', ' ')
                values[fields['name']] = val
            elif fields == 'isotherm tabular':
                final_column = c
                value = sheet.cell(r + 2, final_column).value
                while any(value.startswith(field) for field
                          in _fields['isotherm tabular']['labels'].keys()):
                    final_column += 1
                    value = sheet.cell(r + 2, final_column).value
                list_of_labels = [sheet.cell(r + 2, i).value for i
                                  in range(c, final_column)]
                for item in list_of_labels:
                    if sheet.cell(r + 6, c).value:
                        points = []
                        new_row = r + 4
                        point = sheet.cell(new_row, c).value
                        while point:
                            points.append(point)
                            new_row += 1
                            point = sheet.cell(new_row, c).value
                        c += 1
                        label = _fields['isotherm tabular']['labels']
                        name = next((f for f in label.keys()
                                    if item.startswith(f)), None)
                        if label[name] == 'time':
                            time = _convert_time(points)
                            values[label[name]] = time
                        if label[name] == 'uptake':
                            values[label[name]] = points
                        elif 'time' not in label[name]:
                            values['pressure'][label[name]] = points
    return values
